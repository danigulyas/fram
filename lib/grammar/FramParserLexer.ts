// Generated from grammar/FramParser.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class FramParserLexer extends Lexer {
	public static readonly T__0=1;
	public static readonly T__1=2;
	public static readonly T__2=3;
	public static readonly OpenBrace=4;
	public static readonly CloseBrace=5;
	public static readonly SemiColon=6;
	public static readonly Colon=7;
	public static readonly Comma=8;
	public static readonly Animate=9;
	public static readonly Set=10;
	public static readonly To=11;
	public static readonly When=12;
	public static readonly Is=13;
	public static readonly In=14;
	public static readonly EventVerb=15;
	public static readonly Identifier=16;
	public static readonly IntegerLiteral=17;
	public static readonly StringLiteral=18;
	public static readonly PropertyName=19;
	public static readonly NumericUnit=20;
	public static readonly SingleLineComment=21;
	public static readonly WhiteSpace=22;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "OpenBrace", "CloseBrace", "SemiColon", "Colon", 
		"Comma", "Animate", "Set", "To", "When", "Is", "In", "EventVerb", "Identifier", 
		"IntegerLiteral", "StringLiteral", "PropertyName", "NumericUnit", "SingleLineComment", 
		"WhiteSpace"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'%'", "'ms'", "'s'", "'{'", "'}'", "';'", "':'", "','", "'animate'", 
		"'set'", "'to'", "'when'", "'is'", "'in'", "'clicked'"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, undefined, undefined, undefined, "OpenBrace", "CloseBrace", 
		"SemiColon", "Colon", "Comma", "Animate", "Set", "To", "When", "Is", "In", 
		"EventVerb", "Identifier", "IntegerLiteral", "StringLiteral", "PropertyName", 
		"NumericUnit", "SingleLineComment", "WhiteSpace"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(FramParserLexer._LITERAL_NAMES, FramParserLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return FramParserLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(FramParserLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "FramParser.g4"; }

	@Override
	public get ruleNames(): string[] { return FramParserLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return FramParserLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return FramParserLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x18\x9A\b\x01"+
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06"+
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r"+
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t"+
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t"+
		"\x17\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03"+
		"\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03"+
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\f\x03"+
		"\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F"+
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10"+
		"\x03\x10\x03\x11\x06\x11d\n\x11\r\x11\x0E\x11e\x03\x12\x03\x12\x03\x12"+
		"\x07\x12k\n\x12\f\x12\x0E\x12n\v\x12\x05\x12p\n\x12\x03\x13\x03\x13\x07"+
		"\x13t\n\x13\f\x13\x0E\x13w\v\x13\x03\x13\x03\x13\x03\x14\x03\x14\x06\x14"+
		"}\n\x14\r\x14\x0E\x14~\x03\x14\x05\x14\x82\n\x14\x03\x15\x03\x15\x03\x15"+
		"\x05\x15\x87\n\x15\x03\x16\x03\x16\x03\x16\x03\x16\x07\x16\x8D\n\x16\f"+
		"\x16\x0E\x16\x90\v\x16\x03\x16\x03\x16\x03\x17\x06\x17\x95\n\x17\r\x17"+
		"\x0E\x17\x96\x03\x17\x03\x17\x02\x02\x02\x18\x03\x02\x03\x05\x02\x04\x07"+
		"\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15"+
		"\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02"+
		"\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18\x03\x02\t"+
		"\x04\x02C\\c|\x03\x023;\x03\x022;\x03\x02$$\x04\x02\'\'uu\x05\x02\f\f"+
		"\x0F\x0F\u202A\u202B\x05\x02\v\f\x0F\x0F\"\"\xA3\x02\x03\x03\x02\x02\x02"+
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02"+
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02"+
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02"+
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02"+
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02"+
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03"+
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x03/\x03\x02\x02"+
		"\x02\x051\x03\x02\x02\x02\x074\x03\x02\x02\x02\t6\x03\x02\x02\x02\v8\x03"+
		"\x02\x02\x02\r:\x03\x02\x02\x02\x0F<\x03\x02\x02\x02\x11>\x03\x02\x02"+
		"\x02\x13@\x03\x02\x02\x02\x15H\x03\x02\x02\x02\x17L\x03\x02\x02\x02\x19"+
		"O\x03\x02\x02\x02\x1BT\x03\x02\x02\x02\x1DW\x03\x02\x02\x02\x1FZ\x03\x02"+
		"\x02\x02!c\x03\x02\x02\x02#o\x03\x02\x02\x02%q\x03\x02\x02\x02\'\x81\x03"+
		"\x02\x02\x02)\x86\x03\x02\x02\x02+\x88\x03\x02\x02\x02-\x94\x03\x02\x02"+
		"\x02/0\x07\'\x02\x020\x04\x03\x02\x02\x0212\x07o\x02\x0223\x07u\x02\x02"+
		"3\x06\x03\x02\x02\x0245\x07u\x02\x025\b\x03\x02\x02\x0267\x07}\x02\x02"+
		"7\n\x03\x02\x02\x0289\x07\x7F\x02\x029\f\x03\x02\x02\x02:;\x07=\x02\x02"+
		";\x0E\x03\x02\x02\x02<=\x07<\x02\x02=\x10\x03\x02\x02\x02>?\x07.\x02\x02"+
		"?\x12\x03\x02\x02\x02@A\x07c\x02\x02AB\x07p\x02\x02BC\x07k\x02\x02CD\x07"+
		"o\x02\x02DE\x07c\x02\x02EF\x07v\x02\x02FG\x07g\x02\x02G\x14\x03\x02\x02"+
		"\x02HI\x07u\x02\x02IJ\x07g\x02\x02JK\x07v\x02\x02K\x16\x03\x02\x02\x02"+
		"LM\x07v\x02\x02MN\x07q\x02\x02N\x18\x03\x02\x02\x02OP\x07y\x02\x02PQ\x07"+
		"j\x02\x02QR\x07g\x02\x02RS\x07p\x02\x02S\x1A\x03\x02\x02\x02TU\x07k\x02"+
		"\x02UV\x07u\x02\x02V\x1C\x03\x02\x02\x02WX\x07k\x02\x02XY\x07p\x02\x02"+
		"Y\x1E\x03\x02\x02\x02Z[\x07e\x02\x02[\\\x07n\x02\x02\\]\x07k\x02\x02]"+
		"^\x07e\x02\x02^_\x07m\x02\x02_`\x07g\x02\x02`a\x07f\x02\x02a \x03\x02"+
		"\x02\x02bd\t\x02\x02\x02cb\x03\x02\x02\x02de\x03\x02\x02\x02ec\x03\x02"+
		"\x02\x02ef\x03\x02\x02\x02f\"\x03\x02\x02\x02gp\x072\x02\x02hl\t\x03\x02"+
		"\x02ik\t\x04\x02\x02ji\x03\x02\x02\x02kn\x03\x02\x02\x02lj\x03\x02\x02"+
		"\x02lm\x03\x02\x02\x02mp\x03\x02\x02\x02nl\x03\x02\x02\x02og\x03\x02\x02"+
		"\x02oh\x03\x02\x02\x02p$\x03\x02\x02\x02qu\x07$\x02\x02rt\n\x05\x02\x02"+
		"sr\x03\x02\x02\x02tw\x03\x02\x02\x02us\x03\x02\x02\x02uv\x03\x02\x02\x02"+
		"vx\x03\x02\x02\x02wu\x03\x02\x02\x02xy\x07$\x02\x02y&\x03\x02\x02\x02"+
		"z}\x05!\x11\x02{}\x07/\x02\x02|z\x03\x02\x02\x02|{\x03\x02\x02\x02}~\x03"+
		"\x02\x02\x02~|\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F\x82\x03\x02\x02"+
		"\x02\x80\x82\x05%\x13\x02\x81|\x03\x02\x02\x02\x81\x80\x03\x02\x02\x02"+
		"\x82(\x03\x02\x02\x02\x83\x84\x07o\x02\x02\x84\x87\x07u\x02\x02\x85\x87"+
		"\t\x06\x02\x02\x86\x83\x03\x02\x02\x02\x86\x85\x03\x02\x02\x02\x87*\x03"+
		"\x02\x02\x02\x88\x89\x071\x02\x02\x89\x8A\x071\x02\x02\x8A\x8E\x03\x02"+
		"\x02\x02\x8B\x8D\n\x07\x02\x02\x8C\x8B\x03\x02\x02\x02\x8D\x90\x03\x02"+
		"\x02\x02\x8E\x8C\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x91\x03\x02"+
		"\x02\x02\x90\x8E\x03\x02\x02\x02\x91\x92\b\x16\x02\x02\x92,\x03\x02\x02"+
		"\x02\x93\x95\t\b\x02\x02\x94\x93\x03\x02\x02\x02\x95\x96\x03\x02\x02\x02"+
		"\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x97\x98\x03\x02\x02\x02"+
		"\x98\x99\b\x17\x02\x02\x99.\x03\x02\x02\x02\r\x02elou|~\x81\x86\x8E\x96"+
		"\x03\x02\x03\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!FramParserLexer.__ATN) {
			FramParserLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(FramParserLexer._serializedATN));
		}

		return FramParserLexer.__ATN;
	}

}

